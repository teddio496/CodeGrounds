// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  username    String   @unique
  password    String
  firstName   String   @default("")
  lastName    String   @default("")
  avatar      String   @default("")
  phoneNumber String   @default("")
  role        String   @default("User")
  createdAt   DateTime @default(now())

  templates        Template[]
  blogPosts        BlogPost[]
  reportedBlogs    reportedBlog[]
  reportedComments reportedComment[]
  upDownVotes      upDownVotes[]
  comments         Comment[]
  commentVotes     CommentUpDownVotes[]
}

model Template {
  t_id        Int      @id @default(autoincrement())
  title       String
  owner       String
  code        String   @default("")
  language    String   @default("Python")
  explanation String   @default("")
  public      Boolean  @default(false)
  createdAt   DateTime @default(now())
  forkedFrom  Int?

  tags     TemplateTag[]
  blogs    BlogPost[]
  parent   Template?     @relation("TemplateToTemplate", fields: [forkedFrom], references: [t_id])
  children Template[]    @relation("TemplateToTemplate")

  user User @relation(fields: [owner], references: [username])

  @@unique([owner, title])
}

model TemplateTag {
  t_id Int
  tag  String

  template Template @relation(fields: [t_id], references: [t_id])

  @@unique([tag, t_id]) // same tag cannot appear more than once for the same template
}

model BlogPost {
  b_id        Int      @id @default(autoincrement())
  title       String
  description String
  content     String
  authorName  String
  upvotes     Int      @default(0)
  downvotes   Int      @default(0)
  createdAt   DateTime @default(now())
  hidden      Boolean  @default(false)

  author User @relation(fields: [authorName], references: [username])

  templates    Template[]
  comments     Comment[]
  tags         BlogPostTag[]
  reportedBlog reportedBlog[]
  upDownVotes  upDownVotes[]
}

model BlogPostTag {
  b_id Int
  tag  String

  BlogPost BlogPost @relation(fields: [b_id], references: [b_id])

  @@unique([b_id, tag])
}

model upDownVotes {
  isUp     Boolean @default(true)
  username String
  b_id     Int

  BlogPost BlogPost @relation(fields: [b_id], references: [b_id])
  User     User     @relation(fields: [username], references: [username])

  @@unique([username, b_id])
}

model Comment {
  c_id            Int               @id @default(autoincrement())
  content         String
  postId          Int
  parentId        Int?
  authorName      String
  hidden          Boolean           @default(false)
  upvotes         Int               @default(0)
  downvotes       Int               @default(0)
  createdAt       DateTime          @default(now())
  reportedComment reportedComment[]

  post BlogPost @relation(fields: [postId], references: [b_id])
  user User     @relation(fields: [authorName], references: [username])

  parent   Comment?             @relation("CommentToComment", fields: [parentId], references: [c_id])
  children Comment[]            @relation("CommentToComment")
  votes    CommentUpDownVotes[]
}

model CommentUpDownVotes {
  isUp     Boolean @default(true)
  username String
  c_id     Int

  Comment Comment @relation(fields: [c_id], references: [c_id])
  User    User    @relation(fields: [username], references: [username])

  @@unique([username, c_id])
}

model reportedBlog {
  b_id        Int
  username    String
  explanation String   @default("")
  createdAt   DateTime @default(now())

  BlogPost BlogPost @relation(fields: [b_id], references: [b_id])
  User     User     @relation(fields: [username], references: [username])

  @@unique([b_id, username])
}

model reportedComment {
  c_id        Int
  username    String
  explanation String   @default("")
  createdAt   DateTime @default(now())

  Comment Comment @relation(fields: [c_id], references: [c_id])
  User    User    @relation(fields: [username], references: [username])

  @@unique([c_id, username])
}
