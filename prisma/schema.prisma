// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  username         String            @unique
  password         String
  firstName        String            @default("")
  lastName         String            @default("")
  avatar           String            @default("")
  phoneNumber      String            @default("")
  role             String            @default("User")
  createdAt        DateTime          @default(now())
  templates        Template[]
  blogPosts        BlogPost[]
  reportedBlogs    reportedBlog[]
  reportedComments reportedComment[]
}

model Template {
  t_id        Int           @id @default(autoincrement())
  title       String        @unique
  owner       String
  code        String        @default("")
  explanation String        @default("")
  public      Boolean       @default(false)
  forkedFrom  String?
  tags        TemplateTag[]

  user User @relation(fields: [owner], references: [username])
}

model TemplateTag {
  t_id  Int    @unique
  title String @unique // **title of the template
  tag   String

  template Template @relation(fields: [t_id], references: [t_id])

  @@unique([tag, title]) // same tag cannot appear more than once for the same template
}

model BlogPost {
  b_id         Int            @id @default(autoincrement())
  title        String
  description  String
  tag          String
  content      String
  authorName   String
  upvotes      Int            @default(0)
  downvotes    Int            @default(0)
  createdAt    DateTime       @default(now())
  hidden       Boolean
  author       User           @relation(fields: [authorName], references: [username])
  comments     Comment[]
  BlogPostTag  BlogPostTag[]
  reportedBlog reportedBlog[]
}

model BlogPostTag {
  b_id     Int      @unique
  tag      String
  BlogPost BlogPost @relation(fields: [b_id], references: [b_id])
}

model Comment {
  c_id            Int               @id @default(autoincrement())
  content         String
  postId          Int
  post            BlogPost          @relation(fields: [postId], references: [b_id])
  parentId        Int?
  parent          Comment?          @relation("CommentToComment", fields: [parentId], references: [c_id])
  children        Comment[]         @relation("CommentToComment")
  createdAt       DateTime          @default(now())
  reportedComment reportedComment[]
}

model reportedBlog {
  b_id     Int
  username String

  BlogPost BlogPost @relation(fields: [b_id], references: [b_id])
  User     User     @relation(fields: [username], references: [username])

  @@unique([b_id, username])
}

model reportedComment {
  c_id     Int
  username String

  Comment Comment @relation(fields: [c_id], references: [c_id])
  User    User    @relation(fields: [username], references: [username])

  @@unique([c_id, username])
}
